{"componentChunkName":"component---src-templates-blog-post-js","path":"/templateref-projection-with-context-inside-component/","result":{"data":{"site":{"siteMetadata":{"title":"WhateverJS Blog"}},"markdownRemark":{"id":"6f8e470c-d91f-5ffa-b2cd-2fb616a86207","excerpt":"In a previous post, I wrote a reusable Component which uses an Angular Material Autocomplete and an Input. In this component, when the user types at least…","html":"<p>In a <a href=\"/angular-material-reusable-autocomplete/\">previous post</a>, I wrote a reusable Component which uses an Angular Material Autocomplete and an Input. In this component, when the user types at least 3 characters (by default) a search is triggered to retrieve some options (options where their labels match the typed text), the options displayed are force to fit the option’s layout I wrote in the component. I found interesting the idea of using an embedded template to render a custom layout that uses other option’s attributes (not only the label text).</p>\n<blockquote>\n<p>Basically, the benefits of this is to provide a way of customizing the option’s layout displayed by the Autocomplete Component which can be translated as better UX.</p>\n</blockquote>\n<p>Before starting I will ask you to open the following link > <a href=\"https://stackblitz.com/edit/angular-sbcm7h-emqpgf\">Stackblitz - Reusable Angular Material Input Autocomplete form control with custom Option’s layout</a> where you will find the working example. Along this post I will describe briefly the approach I took and my reasoning about some decisions.</p>\n<h2>User Story</h2>\n<p>As User\nWhen I search X product by its name\nI want to see other attributes regarding to the product.</p>\n<blockquote>\n<p>Consider that the User story I wrote is very very generic, this is just an example.</p>\n</blockquote>\n<h2>Developer’s decisions</h2>\n<ol>\n<li>\n<p>The template to be consumed can be passed as a component’s parameter but also can be capture from its content when is being used. I will take the later approach since I feel it is less confusing for developers, as a developer when I see that an element is written as projected content inside a component I expect it to be used only inside of it.</p>\n<h4>Option 1</h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-template</span> <span class=\"token attr-name\">#myTemplate</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component-a</span> <span class=\"token attr-name\">[optionTemplate]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myTemplate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>component-a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4>Option 2</h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component-a</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-template</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>component-a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n</ol>\n<h2>Prerequisites</h2>\n<ol>\n<li>Might come handy to have read the <a href=\"/angular-material-reusable-autocomplete/\">previous post</a>.</li>\n<li>Knowledge on <a href=\"https://angular.io/api/core/TemplateRef\"><code class=\"language-text\">TemplateRef</code></a> and <a href=\"https://angular.io/api/core/ContentChild\"><code class=\"language-text\">ContentChild</code></a>.</li>\n</ol>\n<h2>Let’s Do It</h2>\n<p>Due to this post is based on a former post I will present only the small changes I did.</p>\n<h4>Controller</h4>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber 58\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token comment\">// Inner form control to link input text changes to mat autocomplete</span>\ninputControl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormControl</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>validators<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnoResults <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\nisSearching <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> _lengthToTriggerSearch <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ContentChild</span></span><span class=\"token punctuation\">(</span>TemplateRef<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">static</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">optionTemplate<span class=\"token operator\">:</span> TemplateRef<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Input</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">set</span> <span class=\"token function\">lengthToTriggerSearch</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_lengthToTriggerSearch <span class=\"token operator\">=</span> <span class=\"token function\">coerceNumberProperty</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ol>\n<li>On line <strong>66</strong> the component gets the <code class=\"language-text\">TemplateRef</code> declared inside its content.</li>\n</ol>\n<h4>Template</h4>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"html\"><pre style=\"counter-reset: linenumber 25\" class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-template</span> <span class=\"token attr-name\">#optionsTemplate</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mat-option</span> <span class=\"token attr-name\">*ngFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>let option of options<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[value]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>provided<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-container</span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>optionTemplate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-container</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token attr-name\">*ngTemplateOutlet</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>optionTemplate; context: { option: option }<span class=\"token punctuation\">\"</span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">></span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-container</span><span class=\"token punctuation\">></span></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-container</span><span class=\"token punctuation\">></span></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-container</span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>!optionTemplate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> {{ option.label }} <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-container</span><span class=\"token punctuation\">></span></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mat-option</span><span class=\"token punctuation\">></span></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-template</span><span class=\"token punctuation\">></span></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ol>\n<li>On line <strong>28</strong> a conditional verifies if <code class=\"language-text\">optionTemplate</code> exists. If it exists then it is projected inside a container with a given context object using the directive <a href=\"https://angular.io/api/common/NgTemplateOutlet\">NgTemplateOutlet\n</a>. The given context contains the option object.</li>\n<li>On line <strong>34</strong> there is still the default layout which addresses the case when the template is not present.</li>\n</ol>\n<h2>Component’s Usage</h2>\n<p>The usage does not change much. As described before the template must be declared inside the component and by using the <code class=\"language-text\">let</code> declaration it has access to the context attached.</p>\n<h4>Template</h4>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"html\"><pre style=\"counter-reset: linenumber 1\" class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input-autocomplete</span>\n  <span class=\"token attr-name\">formControlName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pokemon<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Pokemon's name<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[options]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pokemons$ | async<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">></span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-template</span> <span class=\"token attr-name\">let-option</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pokemon-option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">[src]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option.sprite<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span> {{ option.label }}</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-template</span><span class=\"token punctuation\">></span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>input-autocomplete</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input-autocomplete</span>\n  <span class=\"token attr-name\">formControlName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>swCharacter<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SW character's name<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">lengthToTriggerSearch</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">[options]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>swCharacters$ | async<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">></span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-template</span> <span class=\"token attr-name\">let-option</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></span><span class=\"gatsby-highlight-code-line\">    {{ option.label }} ({{option.gender}})</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-template</span><span class=\"token punctuation\">></span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>input-autocomplete</span><span class=\"token punctuation\">></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>I hope you liked it.</p>\n</blockquote>","frontmatter":{"title":"TemplateRef projection with Context in an Angular Component","date":"January 12, 2020","description":"Based on a reusable Component I wrote before, I had the idea of improving its layout with an embedded template which will be instantiated inside the component with an attached context."},"fields":{"readingTime":{"text":"3 min read"}}},"previous":{"fields":{"slug":"/angular-material-reusable-autocomplete/"},"frontmatter":{"title":"Reusable Angular Material Input Autocomplete form control"}},"next":{"fields":{"slug":"/apprentices-will-not-understand-typescript/"},"frontmatter":{"title":"Apprentices won't understand Typescript, I heard"}}},"pageContext":{"id":"6f8e470c-d91f-5ffa-b2cd-2fb616a86207","previousPostId":"ebba0fce-7dfb-5462-aef4-ab0ea2a563db","nextPostId":"4518d7f8-9ed5-570d-b9c9-dd2c2bea51e2"}},"staticQueryHashes":["2469250815","3881471398"]}